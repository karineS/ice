// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ForumPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package TP1;

public final class ForumPrxHelper extends Ice.ObjectPrxHelperBase implements ForumPrx
{
    public void
    getInfo(Ice.StringHolder theme, Ice.StringHolder moderator, Ice.LongHolder size)
    {
        getInfo(theme, moderator, size, null, false);
    }

    public void
    getInfo(Ice.StringHolder theme, Ice.StringHolder moderator, Ice.LongHolder size, java.util.Map<String, String> __ctx)
    {
        getInfo(theme, moderator, size, __ctx, true);
    }

    private void
    getInfo(Ice.StringHolder theme, Ice.StringHolder moderator, Ice.LongHolder size, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInfo");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                __del.getInfo(theme, moderator, size, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getInfo_name = "getInfo";

    public Ice.AsyncResult begin_getInfo()
    {
        return begin_getInfo(null, false, null);
    }

    public Ice.AsyncResult begin_getInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getInfo(Ice.Callback __cb)
    {
        return begin_getInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInfo(Callback_Forum_getInfo __cb)
    {
        return begin_getInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfo(java.util.Map<String, String> __ctx, Callback_Forum_getInfo __cb)
    {
        return begin_getInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInfo_name, __cb);
        try
        {
            __result.__prepare(__getInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getInfo(Ice.StringHolder theme, Ice.StringHolder moderator, Ice.LongHolder size, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        theme.value = __is.readString();
        moderator.value = __is.readString();
        size.value = __is.readLong();
        __is.endReadEncaps();
    }

    public Message
    getMessage(String title)
        throws Reject
    {
        return getMessage(title, null, false);
    }

    public Message
    getMessage(String title, java.util.Map<String, String> __ctx)
        throws Reject
    {
        return getMessage(title, __ctx, true);
    }

    private Message
    getMessage(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws Reject
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMessage");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                return __del.getMessage(title, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMessage_name = "getMessage";

    public Ice.AsyncResult begin_getMessage(String title)
    {
        return begin_getMessage(title, null, false, null);
    }

    public Ice.AsyncResult begin_getMessage(String title, java.util.Map<String, String> __ctx)
    {
        return begin_getMessage(title, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessage(String title, Ice.Callback __cb)
    {
        return begin_getMessage(title, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(String title, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessage(title, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessage(String title, Callback_Forum_getMessage __cb)
    {
        return begin_getMessage(title, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(String title, java.util.Map<String, String> __ctx, Callback_Forum_getMessage __cb)
    {
        return begin_getMessage(title, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessage(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessage_name, __cb);
        try
        {
            __result.__prepare(__getMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(title);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Message end_getMessage(Ice.AsyncResult __result)
        throws Reject
    {
        Ice.AsyncResult.__check(__result, this, __getMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Reject __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        Message __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new Message();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public Message[]
    getMessages()
    {
        return getMessages(null, false);
    }

    public Message[]
    getMessages(java.util.Map<String, String> __ctx)
    {
        return getMessages(__ctx, true);
    }

    private Message[]
    getMessages(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMessages");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                return __del.getMessages(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMessages_name = "getMessages";

    public Ice.AsyncResult begin_getMessages()
    {
        return begin_getMessages(null, false, null);
    }

    public Ice.AsyncResult begin_getMessages(java.util.Map<String, String> __ctx)
    {
        return begin_getMessages(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessages(Ice.Callback __cb)
    {
        return begin_getMessages(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessages(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessages(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessages(Callback_Forum_getMessages __cb)
    {
        return begin_getMessages(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessages(java.util.Map<String, String> __ctx, Callback_Forum_getMessages __cb)
    {
        return begin_getMessages(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessages(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessages_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessages_name, __cb);
        try
        {
            __result.__prepare(__getMessages_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Message[] end_getMessages(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMessages_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        Message[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = MessageSetHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public String
    getModerator()
    {
        return getModerator(null, false);
    }

    public String
    getModerator(java.util.Map<String, String> __ctx)
    {
        return getModerator(__ctx, true);
    }

    private String
    getModerator(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getModerator");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                return __del.getModerator(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getModerator_name = "getModerator";

    public Ice.AsyncResult begin_getModerator()
    {
        return begin_getModerator(null, false, null);
    }

    public Ice.AsyncResult begin_getModerator(java.util.Map<String, String> __ctx)
    {
        return begin_getModerator(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getModerator(Ice.Callback __cb)
    {
        return begin_getModerator(null, false, __cb);
    }

    public Ice.AsyncResult begin_getModerator(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getModerator(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getModerator(Callback_Forum_getModerator __cb)
    {
        return begin_getModerator(null, false, __cb);
    }

    public Ice.AsyncResult begin_getModerator(java.util.Map<String, String> __ctx, Callback_Forum_getModerator __cb)
    {
        return begin_getModerator(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getModerator(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getModerator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getModerator_name, __cb);
        try
        {
            __result.__prepare(__getModerator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getModerator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getModerator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public String
    getTheme()
    {
        return getTheme(null, false);
    }

    public String
    getTheme(java.util.Map<String, String> __ctx)
    {
        return getTheme(__ctx, true);
    }

    private String
    getTheme(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTheme");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                return __del.getTheme(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTheme_name = "getTheme";

    public Ice.AsyncResult begin_getTheme()
    {
        return begin_getTheme(null, false, null);
    }

    public Ice.AsyncResult begin_getTheme(java.util.Map<String, String> __ctx)
    {
        return begin_getTheme(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTheme(Ice.Callback __cb)
    {
        return begin_getTheme(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTheme(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTheme(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTheme(Callback_Forum_getTheme __cb)
    {
        return begin_getTheme(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTheme(java.util.Map<String, String> __ctx, Callback_Forum_getTheme __cb)
    {
        return begin_getTheme(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTheme(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTheme_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTheme_name, __cb);
        try
        {
            __result.__prepare(__getTheme_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTheme(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTheme_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    postMessage(Message m)
        throws Reject
    {
        postMessage(m, null, false);
    }

    public void
    postMessage(Message m, java.util.Map<String, String> __ctx)
        throws Reject
    {
        postMessage(m, __ctx, true);
    }

    private void
    postMessage(Message m, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws Reject
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("postMessage");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                __del.postMessage(m, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __postMessage_name = "postMessage";

    public Ice.AsyncResult begin_postMessage(Message m)
    {
        return begin_postMessage(m, null, false, null);
    }

    public Ice.AsyncResult begin_postMessage(Message m, java.util.Map<String, String> __ctx)
    {
        return begin_postMessage(m, __ctx, true, null);
    }

    public Ice.AsyncResult begin_postMessage(Message m, Ice.Callback __cb)
    {
        return begin_postMessage(m, null, false, __cb);
    }

    public Ice.AsyncResult begin_postMessage(Message m, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_postMessage(m, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_postMessage(Message m, Callback_Forum_postMessage __cb)
    {
        return begin_postMessage(m, null, false, __cb);
    }

    public Ice.AsyncResult begin_postMessage(Message m, java.util.Map<String, String> __ctx, Callback_Forum_postMessage __cb)
    {
        return begin_postMessage(m, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_postMessage(Message m, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__postMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __postMessage_name, __cb);
        try
        {
            __result.__prepare(__postMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            m.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_postMessage(Ice.AsyncResult __result)
        throws Reject
    {
        Ice.AsyncResult.__check(__result, this, __postMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Reject __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    removeMessage(String title)
        throws Reject
    {
        removeMessage(title, null, false);
    }

    public void
    removeMessage(String title, java.util.Map<String, String> __ctx)
        throws Reject
    {
        removeMessage(title, __ctx, true);
    }

    private void
    removeMessage(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws Reject
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeMessage");
                __delBase = __getDelegate(false);
                _ForumDel __del = (_ForumDel)__delBase;
                __del.removeMessage(title, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeMessage_name = "removeMessage";

    public Ice.AsyncResult begin_removeMessage(String title)
    {
        return begin_removeMessage(title, null, false, null);
    }

    public Ice.AsyncResult begin_removeMessage(String title, java.util.Map<String, String> __ctx)
    {
        return begin_removeMessage(title, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeMessage(String title, Ice.Callback __cb)
    {
        return begin_removeMessage(title, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String title, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeMessage(title, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String title, Callback_Forum_removeMessage __cb)
    {
        return begin_removeMessage(title, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String title, java.util.Map<String, String> __ctx, Callback_Forum_removeMessage __cb)
    {
        return begin_removeMessage(title, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeMessage(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeMessage_name, __cb);
        try
        {
            __result.__prepare(__removeMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(title);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeMessage(Ice.AsyncResult __result)
        throws Reject
    {
        Ice.AsyncResult.__check(__result, this, __removeMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Reject __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public static ForumPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ForumPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ForumPrxHelper __h = new ForumPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ForumPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ForumPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ForumPrxHelper __h = new ForumPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ForumPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ForumPrxHelper __h = new ForumPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ForumPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ForumPrxHelper __h = new ForumPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ForumPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ForumPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ForumPrxHelper __h = new ForumPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ForumPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ForumPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ForumPrxHelper __h = new ForumPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::TP1::Forum"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ForumDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ForumDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ForumPrx v)
    {
        __os.writeProxy(v);
    }

    public static ForumPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ForumPrxHelper result = new ForumPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
